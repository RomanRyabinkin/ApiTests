
from typing import Optional
import requests

from Section.SectionRequests import chat_hash
from User.UserJson import UserJson


class User(UserJson):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def get_user_list(self, data, status_code: Optional[int] = 200):
        from datetime import timedelta
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–π –º–µ—Ç–∫–æ–π
        if status_code == 200:
            response = requests.get(f"{self.main_api_url}/user", json=self.json_for_get_user_list(timestamp=int((self.current_data - timedelta(days=1)).timestamp())), headers=self.get_headers(self.main_user_token_url))
            assert response.status_code == 200, "–ó–∞–ø—Ä–æ—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 —Å—Ç–∞—Ç—É—Å"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
            def check_fields(data = None):
                required_fields = ['login', 'last_online', 'status', 'emoji_status', 'contact_status', 'timezone']
                for field in required_fields:
                    if field not in data:
                        if field not in data or not data[field]:
                            return False

                    return True
                # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                if data is None:
                    data = {
                        'login': 'user123',
                        'last_online': '2025-01-15 10:00:00',
                        'status': 'online',
                        'emoji_status': 'üôÇ',
                        'contact_status': 'active',
                        'timezone': 'UTC+3'
                    }

                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
                check_fields(data)

    def get_user_profile(self,
                         status_code: Optional[int] = None,
                         headers: Optional[dict] = None,
                         user_hash: Optional[str] = None,
                         available_hash: Optional[bool] = True):
        if status_code == 200:
            if available_hash is True and user_hash is None:
                user_hash = self.get_headers(self.test_user_token_url)["hash"]
            req = requests.get(f"{self.main_api_url}/user/{user_hash}", headers=headers, json=self.json_for_get_user(user_hash))
            if available_hash is True and user_hash is None:
                assert req.status_code == 200, "–ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                assert req.json()["response"]["hash"] == user_hash, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö—ç—à —é–∑–µ—Ä–∞"
                assert req.json()["response"]["login"] == self.test_user_name_login, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                assert req.json()["response"]["domain"] == self.test_user_company_domain, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                assert type(req.json()["response"]["date_of_registration"]) == int, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                assert isinstance(req.json()["response"]["phone"],
                                  str), "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                assert req.json()["response"]["name"] == self.test_user_name, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                assert req.json()["response"]["surname"] == self.test_user_surname, "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                #TODO –î–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø–æ–ª—è
                return [req.json()["response"]["contact_status"]]
            elif user_hash is not None:
                return [req.json()["response"]["contact_status"], req.json()]

        elif status_code == 401:
            if available_hash is True and user_hash is None:
                user_hash = self.get_headers(self.test_user_token_url)["hash"]
            req = requests.get(f"{self.main_api_url}/user/{user_hash}", headers=None,
                               json=self.json_for_get_user(user_hash))
            assert req.status_code == 401, "–ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            assert req.json()["errMsg"] == self.no_auth_error, "–ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        elif status_code == 404:
            if user_hash is None and available_hash is False or None:
                user_hash = self.generate_random_string(36)
                req = requests.get(f"{self.main_api_url}/user/{user_hash}", headers=None,
                                   json=self.json_for_get_user(user_hash))
                assert req.status_code == 404, "–ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —é–∑–µ—Ä —Ö—ç—à–∞"
                assert req.json()["errMsg"] == self.not_found_methods_error, "–ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —é–∑–µ—Ä —Ö—ç—à–∞"















